---
description: Implementation plan for current task
globs: 
alwaysApply: false
---
# Prompt Plan for Conway Bio Integration

Below is a plan for integrating the lifegame package with the Conway Bio updater.

<IMPORTANT_INSTRUCTIONS_FOR_EACH_PROMPT>
1. stop after every prompt
2. mark off any items that are completed in [todo.md](mdc:.ai-coding/todo.md)
3. do a scoped `git add`
3. create a commit using the Conventional Commits specification ending with a line `#7 integrate new lifegame package with CI rules that update bio for #1`
</IMPORTANT_INSTRUCTIONS_FOR_EACH_PROMPT>

## Prompt 0: Fix Critical Issues and Refactor Business Logic

Before proceeding with the integration, we need to address several critical issues:

1. Refactor business logic from conway-bio.py into the lifegame package:
   - Move grid formatting and bio-specific functions to lifegame/bio.py
   - Add proper tests for these functions in lifegame/tests/test_bio.py
   - Ensure all functions are properly documented

2. Fix character width issues in rendering:
   - Address the problem that ■ and ▀ are not the same width
   - Investigate and implement a solution for non-monospaced font rendering in GitHub bios
   - Change the default display mode to full block characters for consistency
   - Add tests to verify rendering consistency

3. Fix Docker build issues:
   - Debug and fix the error when running `docker build -f Dockerfile.lifegame -t lifegame .`
   - Ensure the Dockerfile.lifegame is properly configured
   - Test the Docker build process

4. Fix mise run issues:
   - Debug and fix the ValueError when running `mise run run` in the lifegame directory
   - Update the .mise.toml configuration as needed
   - Test the mise run command

## Prompt 1: Refactor Conway Bio to Use Lifegame Package

Please refactor the conway-bio.py script to use the lifegame package instead of its current implementation. The refactored script should:

1. Import the necessary functions from the lifegame package (load_grid_from_string, step, render_full)
2. Use the lifegame package's grid format and functions for:
   - Parsing the current bio into a grid
   - Evolving the grid using the step function
   - Converting the grid back to a string representation
3. Maintain the same functionality:
   - Fetch the current GitHub bio
   - Parse it as a Conway's Game of Life grid
   - Evolve it one step
   - Update the bio with the new grid
4. Handle error cases gracefully
5. Ensure compatibility with the GitHub Actions workflow

Make sure to test the script locally before committing.

## Prompt 1.5: Enhance Conway Bio with Rich Rendering Options

Enhance the conway-bio.py script to leverage the full capabilities of the lifegame package:

1. Add command-line arguments using argparse to expose options from lifegame:
   - Rule variations (Standard Conway, Day & Night, HighLife)
   - Display modes (full block or half block characters)
   - Grid initialization options (random, from file)
2. Add a `--random-by-day` option that:
   - Takes the day of the year
   - Uses modulo arithmetic to select options based on the date
   - Creates variety in the bio updates over time
3. Add a `--randomize-board` option that:
   - Generates a random initial board
   - Allows specifying density of live cells
4. Add a `--preview` option to:
   - Show the evolution without updating the GitHub bio
   - Display multiple iterations locally
5. Ensure backward compatibility:
   - Default behavior should match the original script
   - GitHub Actions workflow should still work without changes
6. Add documentation for the new options in:
   - Script help text
   - Code comments
   - README.md

Test the enhanced script locally with various option combinations before committing.

## Prompt 2: Update GitHub Actions Workflow

Please update the GitHub Actions workflow ([conway-bio.py](mdc:conway-bio.py)) to use the lifegame package:

1. Modify the Docker container configuration to:
   - Use the Dockerfile.lifegame as the base
   - Install any additional dependencies needed for the conway-bio.py script
2. Update the workflow steps to:
   - Ensure the lifegame package is properly installed
   - Run the refactored conway-bio.py script
3. Verify that the workflow can be triggered manually and on schedule
4. Add appropriate error handling and logging

Ensure that the workflow is compatible with the refactored conway-bio.py script.

## Prompt 3: Create a Custom Docker Image for Conway Bio

Please create a custom Docker image specifically for the Conway Bio updater:

1. Create a new Dockerfile (Dockerfile.conway-bio) that:
   - Extends the lifegame Docker image
   - Adds the necessary dependencies for the [conway-bio.py](mdc:conway-bio.py) script (requests, python-dotenv)
   - Copies the conway-bio.py script into the image
   - Sets the appropriate entrypoint
2. Update the GitHub Actions workflow to use this new Docker image
3. Add build instructions to the [README.md](mdc:README.md)
4. Ensure the Docker image can be built and run locally

This custom Docker image will make it easier to run the Conway Bio updater both locally and in GitHub Actions.

## Prompt 4: Documentation and Testing

Please update the documentation and add tests for the Conway Bio integration:

1. Add a section to the README.md explaining:
   - How the Conway Bio updater works
   - How to run it locally
   - How to configure it with GitHub Actions
2. Create a test script that:
   - Mocks the GitHub API calls
   - Verifies that the Conway Bio updater correctly evolves a grid
   - Checks error handling
3. Update the CI/CD workflow to include these tests
4. Add comments to the [conway-bio.py](mdc:conway-bio.py) script explaining how it uses the lifegame package

This will ensure that the integration is well-documented and tested.
